{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Useful starting lines\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You are running Python 3. Good job :)\n"
     ]
    }
   ],
   "source": [
    "# Check the Python version\n",
    "import sys\n",
    "if sys.version.startswith(\"3.\"):\n",
    "  print(\"You are running Python 3. Good job :)\")\n",
    "else:\n",
    "  print(\"This notebook requires Python 3.\\nIf you are using Google Colab, go to Runtime > Change runtime type and choose Python 3.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "  import google.colab\n",
    "  IN_COLAB = True\n",
    "except:\n",
    "  IN_COLAB = False\n",
    "if IN_COLAB:\n",
    "  # Clone the entire repo to access the files.\n",
    "  !git clone -l -s https://github.com/epfml/OptML_course.git cloned-repo\n",
    "  %cd cloned-repo/labs/ex02/template/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "from helpers import *\n",
    "\n",
    "height, weight, gender = load_data(sub_sample=False, add_outlier=False)\n",
    "x, mean_x, std_x = standardize(height)\n",
    "b, A = build_model_data(x, weight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((10000,), (10000, 2))"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.shape, A.shape\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Least Squares Estimation\n",
    "Least squares estimation is one of the fundamental machine learning algorithms. Given an $ n \\times d $ matrix $A$ and a $ n \\times 1$ vector $b$, the goal is to find a vector $x \\in \\mathbb{R}^d$ which minimizes the objective function $$f(x) = \\frac{1}{2n} \\sum_{i=1}^{n} (a_i^\\top x - b_i)^2 = \\frac{1}{2n} \\|Ax - b\\|^2 $$\n",
    "\n",
    "In this exercise, we will try to fit $x$ using Least Squares Estimation. \n",
    "\n",
    "One can see the function is $L$ smooth with $L = \\frac1n\\|A\\|^2$ (Corollary 2.5)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Computing the Objective Function\n",
    "Fill in the `calculate_objective` function below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_objective(Axmb):\n",
    "    \"\"\"Calculate the mean squared error for vector Axmb = Ax - b.\"\"\"\n",
    "    # ***************************************************\n",
    "    # INSERT YOUR CODE HERE\n",
    "    # TODO: compute mean squared error\n",
    "    # ***************************************************\n",
    "    return 0.5*np.mean(e**2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Compute smoothness constant $L$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To compute the spectral norm of A you can use np.linalg.norm(A, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_L(b, A):\n",
    "    \"\"\"Calculate the smoothness constant for f\"\"\"\n",
    "    # ***************************************************\n",
    "    # INSERT YOUR CODE HERE\n",
    "    # TODO: compute ||A.T*A||\n",
    "    # ***************************************************\n",
    "    norm = np.linalg.norm(A,2)\n",
    "    # ***************************************************\n",
    "    # INSERT YOUR CODE HERE\n",
    "    # TODO: compute L = smoothness constant of f\n",
    "    # ***************************************************\n",
    "    n = len(b)\n",
    "    L = (1/n)*norm**2\n",
    "    return L"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gradient Descent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please fill in the functions `compute_gradient` below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_gradient(b, A, x):\n",
    "    \"\"\"Compute the gradient.\"\"\"\n",
    "    # ***************************************************\n",
    "    # INSERT YOUR CODE HERE\n",
    "    # TODO: compute gradient and objective\n",
    "    # ***************************************************\n",
    "<<<<<<< local\n",
    "    err = b-A@x\n",
    "    grad =  -A.T@(err)\n",
    "    n = len(err)\n",
    "    grad = grad/n\n",
    "    return grad, err\n",
    "=======\n",
    "    raise NotImplementedError\n",
    "    return grad, Axmb\n",
    ">>>>>>> remote"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please fill in the functions `gradient_descent` below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradient_descent(b, A, initial_x, max_iters, gamma):\n",
    "    \"\"\"Gradient descent algorithm.\"\"\"\n",
    "    # Define parameters to store x and objective func. values\n",
    "    xs = [initial_x]\n",
    "    objectives = []\n",
    "    x = initial_x\n",
    "    for n_iter in range(max_iters):\n",
    "        # ***************************************************\n",
    "        # INSERT YOUR CODE HERE\n",
    "        # TODO: compute gradient and objective function\n",
    "        # ***************************************************\n",
    "        grad,err = compute_gradient(b,A,x)\n",
    "        obj = calculate_mse(err)\n",
    "        # ***************************************************\n",
    "        # INSERT YOUR CODE HERE\n",
    "        # TODO: update x by a gradient descent step\n",
    "        # ***************************************************\n",
    "        x = x - grad*gamma\n",
    "        # store x and objective function value\n",
    "        xs.append(x)\n",
    "        objectives.append(obj)\n",
    "        print(\"Gradient Descent({bi}/{ti}): objective={l}\".format(\n",
    "              bi=n_iter, ti=max_iters - 1, l=obj))\n",
    "\n",
    "    return objectives, xs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test your gradient descent function with a naive step size through gradient descent demo shown below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gradient Descent(0/49): objective=2792.2367127591674\n",
      "Gradient Descent(1/49): objective=2264.635056030004\n",
      "Gradient Descent(2/49): objective=1837.2777140793808\n",
      "Gradient Descent(3/49): objective=1491.1182670993767\n",
      "Gradient Descent(4/49): objective=1210.7291150455733\n",
      "Gradient Descent(5/49): objective=983.6139018819919\n",
      "Gradient Descent(6/49): objective=799.6505792194912\n",
      "Gradient Descent(7/49): objective=650.6402878628652\n",
      "Gradient Descent(8/49): objective=529.9419518639985\n",
      "Gradient Descent(9/49): objective=432.1762997049166\n",
      "Gradient Descent(10/49): objective=352.98612145606\n",
      "Gradient Descent(11/49): objective=288.8420770744862\n",
      "Gradient Descent(12/49): objective=236.88540112541136\n",
      "Gradient Descent(13/49): objective=194.80049360666086\n",
      "Gradient Descent(14/49): objective=160.71171851647293\n",
      "Gradient Descent(15/49): objective=133.09981069342064\n",
      "Gradient Descent(16/49): objective=110.73416535674832\n",
      "Gradient Descent(17/49): objective=92.61799263404373\n",
      "Gradient Descent(18/49): objective=77.94389272865303\n",
      "Gradient Descent(19/49): objective=66.05787180528657\n",
      "Gradient Descent(20/49): objective=56.43019485735974\n",
      "Gradient Descent(21/49): objective=48.631776529538996\n",
      "Gradient Descent(22/49): objective=42.31505768400421\n",
      "Gradient Descent(23/49): objective=37.19851541912103\n",
      "Gradient Descent(24/49): objective=33.05411618456563\n",
      "Gradient Descent(25/49): objective=29.69715280457578\n",
      "Gradient Descent(26/49): objective=26.97801246678399\n",
      "Gradient Descent(27/49): objective=24.77550879317262\n",
      "Gradient Descent(28/49): objective=22.991480817547433\n",
      "Gradient Descent(29/49): objective=21.546418157291\n",
      "Gradient Descent(30/49): objective=20.375917402483303\n",
      "Gradient Descent(31/49): objective=19.42781179108905\n",
      "Gradient Descent(32/49): objective=18.659846245859733\n",
      "Gradient Descent(33/49): objective=18.037794154223977\n",
      "Gradient Descent(34/49): objective=17.53393195999899\n",
      "Gradient Descent(35/49): objective=17.12580358267677\n",
      "Gradient Descent(36/49): objective=16.795219597045772\n",
      "Gradient Descent(37/49): objective=16.527446568684667\n",
      "Gradient Descent(38/49): objective=16.31055041571217\n",
      "Gradient Descent(39/49): objective=16.134864531804435\n",
      "Gradient Descent(40/49): objective=15.992558965839178\n",
      "Gradient Descent(41/49): objective=15.877291457407322\n",
      "Gradient Descent(42/49): objective=15.78392477557751\n",
      "Gradient Descent(43/49): objective=15.70829776329537\n",
      "Gradient Descent(44/49): objective=15.647039883346832\n",
      "Gradient Descent(45/49): objective=15.597421000588525\n",
      "Gradient Descent(46/49): objective=15.557229705554294\n",
      "Gradient Descent(47/49): objective=15.52467475657656\n",
      "Gradient Descent(48/49): objective=15.498305247904602\n",
      "Gradient Descent(49/49): objective=15.476945945880312\n",
      "Gradient Descent: execution time=0.031 seconds\n"
     ]
    }
   ],
   "source": [
    "# from gradient_descent import *\n",
    "from plots import gradient_descent_visualization\n",
    "\n",
    "# Define the parameters of the algorithm.\n",
    "max_iters = 50\n",
    "\n",
    "gamma = 0.1\n",
    "\n",
    "# Initialization\n",
    "x_initial = np.zeros(A.shape[1])\n",
    "\n",
    "# Start gradient descent.\n",
    "start_time = datetime.datetime.now()\n",
    "gradient_objectives_naive, gradient_xs_naive = gradient_descent(b, A, x_initial, max_iters, gamma)\n",
    "end_time = datetime.datetime.now()\n",
    "\n",
    "# Print result\n",
    "exection_time = (end_time - start_time).total_seconds()\n",
    "print(\"Gradient Descent: execution time={t:.3f} seconds\".format(t=exection_time))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Time Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<function __main__.plot_figure(n_iter)>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from ipywidgets import IntSlider, interact\n",
    "from grid_search import *\n",
    "\n",
    "def plot_figure(n_iter):\n",
    "    # Generate grid data for visualization (parameters to be swept and best combination)\n",
    "    grid_x0, grid_x1 = generate_w(num_intervals=10)\n",
    "    grid_objectives = grid_search(b, A, grid_x0, grid_x1)\n",
    "    obj_star, x0_star, x1_star = get_best_parameters(grid_x0, grid_x1, grid_objectives)\n",
    "    \n",
    "    fig = gradient_descent_visualization(\n",
    "        gradient_objectives_naive, gradient_xs_naive, grid_objectives, grid_x0, grid_x1, mean_x, std_x, height, weight, n_iter)\n",
    "    fig.set_size_inches(10.0, 6.0)\n",
    "\n",
    "interact(plot_figure, n_iter=IntSlider(min=1, max=len(gradient_xs_naive)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try doing gradient descent with a better learning rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gradient Descent(0/49): objective=2792.2367127591674\n",
      "Gradient Descent(1/49): objective=15.3858878688294\n",
      "Gradient Descent(2/49): objective=15.3858878688294\n",
      "Gradient Descent(3/49): objective=15.3858878688294\n",
      "Gradient Descent(4/49): objective=15.3858878688294\n",
      "Gradient Descent(5/49): objective=15.3858878688294\n",
      "Gradient Descent(6/49): objective=15.3858878688294\n",
      "Gradient Descent(7/49): objective=15.3858878688294\n",
      "Gradient Descent(8/49): objective=15.3858878688294\n",
      "Gradient Descent(9/49): objective=15.3858878688294\n",
      "Gradient Descent(10/49): objective=15.3858878688294\n",
      "Gradient Descent(11/49): objective=15.3858878688294\n",
      "Gradient Descent(12/49): objective=15.3858878688294\n",
      "Gradient Descent(13/49): objective=15.3858878688294\n",
      "Gradient Descent(14/49): objective=15.3858878688294\n",
      "Gradient Descent(15/49): objective=15.3858878688294\n",
      "Gradient Descent(16/49): objective=15.3858878688294\n",
      "Gradient Descent(17/49): objective=15.3858878688294\n",
      "Gradient Descent(18/49): objective=15.3858878688294\n",
      "Gradient Descent(19/49): objective=15.3858878688294\n",
      "Gradient Descent(20/49): objective=15.3858878688294\n",
      "Gradient Descent(21/49): objective=15.3858878688294\n",
      "Gradient Descent(22/49): objective=15.3858878688294\n",
      "Gradient Descent(23/49): objective=15.3858878688294\n",
      "Gradient Descent(24/49): objective=15.3858878688294\n",
      "Gradient Descent(25/49): objective=15.3858878688294\n",
      "Gradient Descent(26/49): objective=15.3858878688294\n",
      "Gradient Descent(27/49): objective=15.3858878688294\n",
      "Gradient Descent(28/49): objective=15.3858878688294\n",
      "Gradient Descent(29/49): objective=15.3858878688294\n",
      "Gradient Descent(30/49): objective=15.3858878688294\n",
      "Gradient Descent(31/49): objective=15.3858878688294\n",
      "Gradient Descent(32/49): objective=15.3858878688294\n",
      "Gradient Descent(33/49): objective=15.3858878688294\n",
      "Gradient Descent(34/49): objective=15.3858878688294\n",
      "Gradient Descent(35/49): objective=15.3858878688294\n",
      "Gradient Descent(36/49): objective=15.3858878688294\n",
      "Gradient Descent(37/49): objective=15.3858878688294\n",
      "Gradient Descent(38/49): objective=15.3858878688294\n",
      "Gradient Descent(39/49): objective=15.3858878688294\n",
      "Gradient Descent(40/49): objective=15.3858878688294\n",
      "Gradient Descent(41/49): objective=15.3858878688294\n",
      "Gradient Descent(42/49): objective=15.3858878688294\n",
      "Gradient Descent(43/49): objective=15.3858878688294\n",
      "Gradient Descent(44/49): objective=15.3858878688294\n",
      "Gradient Descent(45/49): objective=15.3858878688294\n",
      "Gradient Descent(46/49): objective=15.3858878688294\n",
      "Gradient Descent(47/49): objective=15.3858878688294\n",
      "Gradient Descent(48/49): objective=15.3858878688294\n",
      "Gradient Descent(49/49): objective=15.3858878688294\n",
      "Gradient Descent: execution time=0.053 seconds\n"
     ]
    }
   ],
   "source": [
    "# Define the parameters of the algorithm.\n",
    "max_iters = 50\n",
    "\n",
    "# ***************************************************\n",
    "# INSERT YOUR CODE HERE\n",
    "# TODO: a better learning rate using the smoothness of f\n",
    "# ***************************************************\n",
    "L = calculate_L(b,A)\n",
    "gamma = 1/L\n",
    "\n",
    "# Initialization\n",
    "x_initial = np.zeros(A.shape[1])\n",
    "\n",
    "# Start gradient descent.\n",
    "start_time = datetime.datetime.now()\n",
    "gradient_objectives, gradient_xs = gradient_descent(b, A, x_initial, max_iters, gamma)\n",
    "end_time = datetime.datetime.now()\n",
    "\n",
    "# Print result\n",
    "exection_time = (end_time - start_time).total_seconds()\n",
    "print(\"Gradient Descent: execution time={t:.3f} seconds\".format(t=exection_time))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Time visualization with a better learning rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<function __main__.plot_figure(n_iter)>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def plot_figure(n_iter):\n",
    "    # Generate grid data for visualization (parameters to be swept and best combination)\n",
    "    grid_x0, grid_x1 = generate_w(num_intervals=10)\n",
    "    grid_objectives = grid_search(b, A, grid_x0, grid_x1)\n",
    "    obj_star, x0_star, x1_star = get_best_parameters(grid_x0, grid_x1, grid_objectives)\n",
    "    \n",
    "    fig = gradient_descent_visualization(\n",
    "        gradient_objectives, gradient_xs, grid_objectives, grid_x0, grid_x1, mean_x, std_x, height, weight, n_iter)\n",
    "    fig.set_size_inches(10.0, 6.0)\n",
    "\n",
    "interact(plot_figure, n_iter=IntSlider(min=1, max=len(gradient_xs)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Loading more complex data\n",
    "The data is taken from https://archive.ics.uci.edu/ml/datasets/Concrete+Compressive+Strength "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.loadtxt(\"Concrete_Data.csv\",delimiter=\",\")\n",
    "\n",
    "A = data[:,:-1]\n",
    "b = data[:,-1]\n",
    "A, mean_A, std_A = standardize(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1030,), (1030, 8))"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.shape, A.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Running gradient descent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assuming bounded gradients\n",
    "Assume we are moving in a bounded region $\\|x\\| \\leq 25$ containing all iterates (and we assume $\\|x-x^\\star\\| \\leq 25$ as well, for simplicity). Then by $\\nabla f(x) = \\frac{1}{n}A^\\top (Ax - b)$, one can see that $f$ is Lipschitz over that bounded region, with Lipschitz constant $\\|\\nabla f(x)\\| \\leq \\frac{1}{n} (\\|A^\\top A\\|\\|x\\| + \\|A^\\top b\\|)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "70.55157320349309"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ***************************************************\n",
    "# INSERT YOUR CODE HERE\n",
    "# TODO: Compute the bound on the gradient norm\n",
    "# ***************************************************\n",
    "n = A.shape[0]\n",
    "grad_norm_bound = (1/n) * (np.linalg.norm(A.T@A,2)*25 + np.linalg.norm(A.T@b))\n",
    "grad_norm_bound\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fill in the learning rate assuming bounded gradients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gradient Descent(0/49): objective=780.8686016504854\n",
      "Gradient Descent(1/49): objective=771.9451380356\n",
      "Gradient Descent(2/49): objective=764.0577873681689\n",
      "Gradient Descent(3/49): objective=757.0806435792373\n",
      "Gradient Descent(4/49): objective=750.9036210736357\n",
      "Gradient Descent(5/49): objective=745.4304063496157\n",
      "Gradient Descent(6/49): objective=740.5766831862035\n",
      "Gradient Descent(7/49): objective=736.2685935205592\n",
      "Gradient Descent(8/49): objective=732.4414016205171\n",
      "Gradient Descent(9/49): objective=729.0383338025285\n",
      "Gradient Descent(10/49): objective=726.0095698886381\n",
      "Gradient Descent(11/49): objective=723.3113659504752\n",
      "Gradient Descent(12/49): objective=720.9052907468907\n",
      "Gradient Descent(13/49): objective=718.7575607023603\n",
      "Gradient Descent(14/49): objective=716.8384603602686\n",
      "Gradient Descent(15/49): objective=715.1218370326862\n",
      "Gradient Descent(16/49): objective=713.5846599014743\n",
      "Gradient Descent(17/49): objective=712.2066351425038\n",
      "Gradient Descent(18/49): objective=710.9698697774038\n",
      "Gradient Descent(19/49): objective=709.8585779325338\n",
      "Gradient Descent(20/49): objective=708.8588240256167\n",
      "Gradient Descent(21/49): objective=707.9582981259695\n",
      "Gradient Descent(22/49): objective=707.1461193609596\n",
      "Gradient Descent(23/49): objective=706.4126637831231\n",
      "Gradient Descent(24/49): objective=705.749413581208\n",
      "Gradient Descent(25/49): objective=705.1488249244085\n",
      "Gradient Descent(26/49): objective=704.6042120808993\n",
      "Gradient Descent(27/49): objective=704.1096457569055\n",
      "Gradient Descent(28/49): objective=703.659863867327\n",
      "Gradient Descent(29/49): objective=703.2501931788438\n",
      "Gradient Descent(30/49): objective=702.876480466178\n",
      "Gradient Descent(31/49): objective=702.5350319958109\n",
      "Gradient Descent(32/49): objective=702.2225603024713\n",
      "Gradient Descent(33/49): objective=701.9361373550965\n",
      "Gradient Descent(34/49): objective=701.6731533233591\n",
      "Gradient Descent(35/49): objective=701.4312802554624\n",
      "Gradient Descent(36/49): objective=701.2084400647088\n",
      "Gradient Descent(37/49): objective=701.0027762979972\n",
      "Gradient Descent(38/49): objective=700.8126292253704\n",
      "Gradient Descent(39/49): objective=700.6365138472892\n",
      "Gradient Descent(40/49): objective=700.4731004665173\n",
      "Gradient Descent(41/49): objective=700.3211975153508\n",
      "Gradient Descent(42/49): objective=700.1797363672055\n",
      "Gradient Descent(43/49): objective=700.0477578950218\n",
      "Gradient Descent(44/49): objective=699.9244005681861\n",
      "Gradient Descent(45/49): objective=699.8088899052115\n",
      "Gradient Descent(46/49): objective=699.7005291217807\n",
      "Gradient Descent(47/49): objective=699.5986908333042\n",
      "Gradient Descent(48/49): objective=699.5028096882613\n",
      "Gradient Descent(49/49): objective=699.4123758235777\n",
      "Gradient Descent: execution time=0.038 seconds\n"
     ]
    }
   ],
   "source": [
    "max_iters = 50\n",
    "\n",
    "# ***************************************************\n",
    "# INSERT YOUR CODE HERE\n",
    "# TODO: Compute learning rate based on bounded gradient\n",
    "# ***************************************************\n",
    "gamma = 25/(grad_norm_bound * math.sqrt(max_iters))\n",
    "\n",
    "# Initialization\n",
    "x_initial = np.zeros(A.shape[1])\n",
    "\n",
    "# Start gradient descent.\n",
    "start_time = datetime.datetime.now()\n",
    "bd_gradient_objectives, bd_gradient_xs = gradient_descent(b, A, x_initial, max_iters, gamma)\n",
    "end_time = datetime.datetime.now()\n",
    "\n",
    "\n",
    "# Print result\n",
    "exection_time = (end_time - start_time).total_seconds()\n",
    "print(\"Gradient Descent: execution time={t:.3f} seconds\".format(t=exection_time))\n",
    "\n",
    "# Averaging the iterates as is the case for bounded gradients case\n",
    "bd_gradient_objectives_averaged = []\n",
    "for i in range(len(bd_gradient_xs)):\n",
    "    if i > 0:\n",
    "        bd_gradient_xs[i] = (i * bd_gradient_xs[i-1] + bd_gradient_xs[i])/(i + 1)\n",
    "    grad, err = compute_gradient(b, A, bd_gradient_xs[i])\n",
    "    obj = calculate_mse(err)\n",
    "    bd_gradient_objectives_averaged.append(obj)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gradient descent using smoothness\n",
    "Fill in the learning rate using smoothness of the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gradient Descent(0/49): objective=780.8686016504854\n",
      "Gradient Descent(1/49): objective=721.5052560260677\n",
      "Gradient Descent(2/49): objective=706.7843584315374\n",
      "Gradient Descent(3/49): objective=702.1659603718193\n",
      "Gradient Descent(4/49): objective=700.3195706210596\n",
      "Gradient Descent(5/49): objective=699.3927282552015\n",
      "Gradient Descent(6/49): objective=698.8265138747603\n",
      "Gradient Descent(7/49): objective=698.4252460378514\n",
      "Gradient Descent(8/49): objective=698.1121802865196\n",
      "Gradient Descent(9/49): objective=697.8540419775695\n",
      "Gradient Descent(10/49): objective=697.6346924802035\n",
      "Gradient Descent(11/49): objective=697.4451956987403\n",
      "Gradient Descent(12/49): objective=697.2798771098778\n",
      "Gradient Descent(13/49): objective=697.134694345026\n",
      "Gradient Descent(14/49): objective=697.0065306304226\n",
      "Gradient Descent(15/49): objective=696.8928669366339\n",
      "Gradient Descent(16/49): objective=696.7916143488984\n",
      "Gradient Descent(17/49): objective=696.701017217532\n",
      "Gradient Descent(18/49): objective=696.6195897256094\n",
      "Gradient Descent(19/49): objective=696.5460698345364\n",
      "Gradient Descent(20/49): objective=696.4793834248536\n",
      "Gradient Descent(21/49): objective=696.4186151939682\n",
      "Gradient Descent(22/49): objective=696.3629844974911\n",
      "Gradient Descent(23/49): objective=696.3118250564795\n",
      "Gradient Descent(24/49): objective=696.2645678090805\n",
      "Gradient Descent(25/49): objective=696.220726375205\n",
      "Gradient Descent(26/49): objective=696.1798847171167\n",
      "Gradient Descent(27/49): objective=696.141686656003\n",
      "Gradient Descent(28/49): objective=696.105826961754\n",
      "Gradient Descent(29/49): objective=696.072043778206\n",
      "Gradient Descent(30/49): objective=696.0401121828639\n",
      "Gradient Descent(31/49): objective=696.0098387107206\n",
      "Gradient Descent(32/49): objective=695.9810566975378\n",
      "Gradient Descent(33/49): objective=695.9536223197188\n",
      "Gradient Descent(34/49): objective=695.9274112263599\n",
      "Gradient Descent(35/49): objective=695.9023156747344\n",
      "Gradient Descent(36/49): objective=695.87824209377\n",
      "Gradient Descent(37/49): objective=695.8551090113992\n",
      "Gradient Descent(38/49): objective=695.8328452912637\n",
      "Gradient Descent(39/49): objective=695.8113886324363\n",
      "Gradient Descent(40/49): objective=695.7906842927655\n",
      "Gradient Descent(41/49): objective=695.770684002349\n",
      "Gradient Descent(42/49): objective=695.7513450386715\n",
      "Gradient Descent(43/49): objective=695.7326294392002\n",
      "Gradient Descent(44/49): objective=695.714503330864\n",
      "Gradient Descent(45/49): objective=695.6969363589234\n",
      "Gradient Descent(46/49): objective=695.6799012003625\n",
      "Gradient Descent(47/49): objective=695.6633731491596\n",
      "Gradient Descent(48/49): objective=695.6473297626893\n",
      "Gradient Descent(49/49): objective=695.6317505601199\n",
      "Gradient Descent: execution time=0.038 seconds\n"
     ]
    }
   ],
   "source": [
    "max_iters = 50\n",
    "\n",
    "\n",
    "# ***************************************************\n",
    "# INSERT YOUR CODE HERE\n",
    "# TODO: a better learning rate using the smoothness of f\n",
    "# ***************************************************\n",
    "L = calculate_L(b,A)\n",
    "gamma = 1/L\n",
    "\n",
    "# Initialization\n",
    "x_initial = np.zeros(A.shape[1])\n",
    "\n",
    "# Start gradient descent.\n",
    "start_time = datetime.datetime.now()\n",
    "gradient_objectives, gradient_xs = gradient_descent(b, A, x_initial, max_iters, gamma)\n",
    "end_time = datetime.datetime.now()\n",
    "\n",
    "# Print result\n",
    "exection_time = (end_time - start_time).total_seconds()\n",
    "print(\"Gradient Descent: execution time={t:.3f} seconds\".format(t=exection_time))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting the Evolution of the Objective Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 8))\n",
    "plt.xlabel('Number of steps')\n",
    "plt.ylabel('Objective Function')\n",
    "#plt.yscale(\"log\")\n",
    "plt.plot(range(len(gradient_objectives)), gradient_objectives,'r', label='gradient descent with 1/L stepsize')\n",
    "plt.plot(range(len(bd_gradient_objectives)), bd_gradient_objectives,'b', label='gradient descent assuming bounded gradients')\n",
    "plt.plot(range(len(bd_gradient_objectives_averaged)), bd_gradient_objectives_averaged,'g', label='gradient descent assuming bounded gradients with averaged iterates')\n",
    "plt.legend(loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "widgets": {
   "state": {
    "d2b2c3aea192430e81437f33ba0b0e69": {
     "views": [
      {
       "cell_index": 22
      }
     ]
    },
    "e4a6a7a70ccd42ddb112989c04f2ed3f": {
     "views": [
      {
       "cell_index": 18
      }
     ]
    }
   },
   "version": "1.2.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
